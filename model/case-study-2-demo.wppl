var params =
    {
        policyAlpha     : 0.1,
        questionerAlpha : 1.0,
        R1Alpha         : 9.0,
        relevanceBetaR1 : 0.01,
        costWeight      : 0.4,
        questionCost    : 0.0
    }

var contextTarget = extend(
    tsoContext,
   { name: "target",
     decisionProblem : function(w, a) {
        return _.includes(w, a) ?
            (a == 'target' ? 9.618 :
             a == 'competitor' ? 5.693 :
             a == 'sameCat' ? 3.611 : 2.369) :
            0;
    }}
)

var contextCompetitor = extend(
    tsoContext,
    {name: "competitor",
     decisionProblem : function(w, a) {
        return _.includes(w, a) ?
            (a == 'target' ? 5.555583 :
             a == 'competitor' ? 9.521075 :
             a == 'sameCat' ? 3.814870 : 2.485163) :
             0;
    }}
)


var contextSameCat = extend(
    tsoContext,
    {name: 'sameCat',
     decisionProblem : function(w, a) {
        return _.includes(w, a) ?
            (a == 'target' ? 4.008662 :
             a == 'competitor' ? 3.958796 :
             a == 'sameCat' ? 9.503768 : 2.615277) :
            0;
    }}
)

var contextOtherCat = extend(
    tsoContext,
    {name: 'otherCat',
     decisionProblem : function(w, a) {
        return _.includes(w, a) ?
            (a == 'target' ? 2.408933 :
             a == 'competitor' ? 2.547491 :
             a == 'sameCat' ? 2.537159 : 9.564791) :
            0;
    }}
)

var identity = extend(
    tsoContext,
    {name: 'identity',
     decisionProblem : function(w, a) {
        return _.includes(w, a) ?
            (a == 'target' ? 10 :
             a == 'competitor' ? 0 :
             a == 'sameCat' ? 0 : 0) :
            0;
    }}
)


var question = tsoContext.questions[0];

// R1 uncertain
var R1Prior = {
    target: contextTarget,
    competitor: contextCompetitor,
    sameCat: contextSameCat,
    otherCat: contextOtherCat,
    identity: identity,
    distribution: Categorical({vs: ["target", "competitor", "sameCat", "otherCat", "identity"]})
}

var R1Prediction = R1Averager(tsoContext, R1Prior, question, params)
var R1PredictionReduced = Infer({method: 'enumerate'}, function() {
    var response = sample(R1Prediction);
    // return response == 'no.---' ? 'taciturn' :
    // 	response == 'no.competitor' ? 'competitor' :
    // 	response == 'no.sameCat' ? 'sameCat' :
    // 	response == 'no.otherCat' ? 'otherCat' :
    // 	response == 'no.competitor+sameCat' ? 'sameCat' :
    // 	response == 'no.competitor+otherCat' ? 'otherCat' :
    // 	response == 'no.sameCat+otherCat' ? 'otherCat' :
    // 	response == 'no.competitor+sameCat+otherCat' ? 'exhaustive' :
    // 	'other'
    return(response)
})
console.log("R1-Averager:")
terminalViz(R1PredictionReduced, 4)
