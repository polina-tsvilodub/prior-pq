
//////////////////////////////////////////////////
// output for R script
//////////////////////////////////////////////////

// function to call when using RwebPPL
var makeR = function(){
  if (RInput[0].task == "TSO") {
    var params =
      {
        policyAlpha     : RInput[0].policyAlpha,
        questionerAlpha : RInput[0].questionerAlpha,
        R1Alpha         : RInput[0].R1Alpha,
        relevanceBetaR1 : RInput[0].relevanceBetaR1,   //
        costWeight      : RInput[0].costWeight,
	failure         : RInput[0].failure,
        questionCost    : RInput[0].questionCost      // cost for a question (relative to no question)
      }

    var contextTarget = extend(
      tsoContext,
      {name: "target",
       decisionProblem : function(w, a) {
        return _.includes(w, a) ?
          (a == 'target' ? RInput[0].utilTarget :
           a == 'competitor' ? RInput[0].utilCompetitor :
           a == 'sameCat' ? RInput[0].utilSameCat : RInput[0].utilOtherCat) :
          params.failure;
      }}
    )

    var contextCompetitor = extend(
      tsoContext,
      {name: "competitor",
       decisionProblem : function(w, a) {
        return _.includes(w, a) ?
          (a == 'target' ? RInput[1].utilTarget :
           a == 'competitor' ? RInput[1].utilCompetitor :
           a == 'sameCat' ? RInput[1].utilSameCat : RInput[1].utilOtherCat) :
	   params.failure;
      }}
    )


    var contextSameCat = extend(
      tsoContext,
      {name: 'sameCat',
       decisionProblem : function(w, a) {
        return _.includes(w, a) ?
          (a == 'target' ? RInput[2].utilTarget :
           a == 'competitor' ? RInput[2].utilCompetitor :
           a == 'sameCat' ? RInput[2].utilSameCat : RInput[2].utilOtherCat) :
          params.failure
      }}
    )

    var contextOtherCat = extend(
      tsoContext,
      {name: "otherCat",
       decisionProblem : function(w, a) {
        return _.includes(w, a) ?
          (a == 'target' ? RInput[3].utilTarget :
           a == 'competitor' ? RInput[3].utilCompetitor :
           a == 'sameCat' ? RInput[3].utilSameCat : RInput[3].utilOtherCat) :
          params.failure
      }}
    )

    var question = tsoContext.questions[0];

    // R1 uncertain
    var R1Prior = {
	target: contextTarget,
	competitor: contextCompetitor,
	sameCat: contextSameCat,
	otherCat: contextOtherCat,
	distribution: Categorical({vs: ["target", "competitor", "sameCat", "otherCat"]})
    }
    
    var R1Prediction = R1Averager(tsoContext, R1Prior, question, params)
    var R1PredictionReduced = Infer({method: 'enumerate'}, function() {
        var response = sample(R1Prediction);
	return response == 'no.---' ? 'taciturn' :
	    response == 'no.competitor' ? 'competitor' :
	    response == 'no.sameCat' ? 'sameCat' :
	    response == 'no.otherCat' ? 'otherCat' :
	    response == 'no.competitor+sameCat' ? 'sameCat' :
	    response == 'no.competitor+otherCat' ? 'otherCat' :
	    response == 'no.sameCat+otherCat' ? 'otherCat' :
	    response == 'no.competitor+sameCat+otherCat' ? 'exhaustive' :
	    'other'
        condition(match)
        return(response)
      })

    return(R1PredictionReduced)
  }

}

makeR()
