/////////////////////////////////////////////////////////////
// minimal context model (exactly one element true/available)
/////////////////////////////////////////////////////////////

// minimal atoms
var bakedGoodsMinimal = ['RP', 'LC', 'SC', 'AS'];

var pieCakeContextMinimal = {
  name : "minimal",
  // worlds include all possible sub-sets of 0 < k < N pies and cakes
  worlds : bakedGoodsMinimal,

  // actions include ordering 1 pie/cake
  actions: _.concat(bakedGoodsMinimal, "no-order"),

  // questions include yes/no question for each baked good
  questions: [
    // single item polar questions
    {type: 'polar-disjunct', queried: ['RP'], text: 'RP?'},
    {type: 'polar-disjunct', queried: ['LC'], text: 'LC?'},
    {type: 'polar-disjunct', queried: ['SC'], text: 'SC?'},
    {type: 'polar-disjunct', queried: ['AS'], text: 'AS?'},
    // all two-place disjunctions
    // {type: 'polar-disjunct', queried: ['RP', 'LC'], text: 'RPorLC?'},
    // {type: 'polar-disjunct', queried: ['RP', 'SC'], text: 'RPorSC?'},
    // {type: 'polar-disjunct', queried: ['RP', 'AS'], text: 'RPorAS?'},
    // {type: 'polar-disjunct', queried: ['LC', 'SC'], text: 'LCorSC?'},
    // {type: 'polar-disjunct', queried: ['LC', 'AS'], text: 'LCorAS?'},
    // {type: 'polar-disjunct', queried: ['SC', 'AS'], text: 'SCorAS?'},
    // wh-question
    {type: 'wh', queried: bakedGoodsMinimal, text: 'which?'},
  ],

  // assume questioner is uncertain but answerer has Delta on true world (e.g. shopkeep)
  questionerBeliefs: Categorical({vs: bakedGoodsMinimal}),
  R0PriorOverWorlds: Delta({v: 'RP'}),

  // raspberry pie is #1 preference (U=5), lemon cake is #2 preference (U=4).
  // otherwise U=1 if whatever you order is in stock and 0 if it's not in stock
  decisionProblem: function(w, a) {
    return _.includes(w, a) ? 1 : 0;
  },
  // semantics of responses (in the context of a question)
  meaning: function(world, question, response) {
    if(response == '') {
      // assume silence has null meaning
      return true;
    }
    if(question.type == 'polar-disjunct') {
      return (response == 'yes' ? _.includes(question.queried, world) :
              response == 'no' ?  (! _.includes(question.queried, world)) : 0);
    } else if(question.type == 'wh') {
      return world == response;
    } else if(question.type == 'no-question') {
      return true;
    }
    else {
      return console.error('question type not yet supported: ' + question.type);
    }
  },
  // R0 chooses among responses licensed by the question
  getLicensedResponsesR0: function(question) {
    if(question.type == 'polar-disjunct') {
      return ['yes', 'no'];
    } else if(question.type == 'wh') {
      return bakedGoodsMinimal;
    } else if(question.type == 'no-question') {
      return ['yes'] // TODO: check which response best to give to no question
    }
    else {
      return console.error('question type not yet supported: ' + question.type);
    }
  }
};

// amended context with unbiased questioner beliefs and no preferences over any baked good
var pieCakeContextMinimalWithPreferences = extend(
  pieCakeContextMinimal,
  {
    name: "minimal-with-preferences",
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'RP' ? 5 : a == 'LC' ? 3 : 1) : 0.0000001;
    }
  }
)

/////////////////////////////////////////////
// richer context w/ powerset of baked goods
/////////////////////////////////////////////

// full power-set baked goods examples (from presentations)
var bakedGoods = ['raspPie', 'raspCake', 'lemonPie', 'lemonCake'];
var bakeryContextSets = prepareContextSets(bakedGoods);
var setsOfBakedGoods  = bakeryContextSets.powerSet;
var R1WHResponses     = bakeryContextSets.R1WHResponses;
var R1PolarResponses  = bakeryContextSets.R1PolarResponses;

var pieCakeContext = {
  name : "pieCake-prefs",
  // worlds include all possible sub-sets of 0 < k < N pies and cakes
  worlds : setsOfBakedGoods,

  // actions include ordering 1 pie/cake
  actions: _.concat(bakedGoods, "nothing"),

  // questions include yes/no question for each baked good
  questions: [
    {type: 'single-item', queried: ['lemonPie'], text: 'Lemon pie?'},
    {type: 'single-item', queried: ['lemonCake'], text: 'Lemon cake?'},
    {type: 'single-item', queried: ['raspPie'], text: 'Raspberry pie?'},
    {type: 'single-item', queried: ['raspCake'], text: 'Raspberry cake?'},
    {type: 'polar-disjunct', queried: ['lemonPie', 'raspPie', 'lemonPie+raspPie'], text: 'Pie?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspCake', 'lemonCake+raspCake'], text: 'Cake?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspCake', 'lemonPie', 'raspPie'], text: 'Anything?'},
    // MF additional disjunctions
    {type: 'polar-disjunct', queried: ['lemonPie', 'lemonCake', 'lemonPie+lemonCake'], text: 'Anything w/ lemon?'},
    {type: 'polar-disjunct', queried: ['raspPie', 'raspCake', 'raspPie+raspCake'], text: 'Anything w/ raspberry?'},
    {type: 'polar-disjunct', queried: ['lemonPie', 'raspCake', 'lemonPie+raspCake'], text: 'LP or RC?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspPie', 'lemonCake+raspPie'], text: 'RP or LC?'},
    {type: 'wh', queried: ['lemonCake', 'raspCake'], text: 'Which cakes?'},
    {type: 'wh', queried: ['lemonPie', 'raspPie'], text: 'Which pies?'},
    {type: 'wh', queried: ['lemonPie', 'lemonCake', 'raspPie', 'raspCake'], text: 'Which goods?'},
  ],

  // assume questioner is uncertain but answerer has Delta on true world (e.g. shopkeep)
  questionerBeliefs: Categorical({vs: setsOfBakedGoods}),
  R0PriorOverWorlds: Delta({v: 'lemonCake'}),
  R1PriorOverWorlds: Delta({v: 'lemonCake'}),

  // raspberry pie is #1 preference (U=5), lemon cake is #2 preference (U=4).
  // otherwise U=1 if whatever you order is in stock and 0 if it's not in stock
  decisionProblem: function(w, a) {
    return _.includes(w, a) ?
      (a == 'raspPie' ? 5 :
       a == 'lemonCake' ? 3 : 1) :
      0.0000001;
  },

  // R0 chooses among responses licensed by the question
  getLicensedResponsesR0: function(question) {
    if(question.type == 'single-item') {
      // by definition polar questions require 'yes'/'no' answer
      return ['yes', 'no'];
    } else if(question.type == 'polar-disjunct') {
      // by definition polar questions require 'yes'/'no' answer
      var answers = ['yes', 'no'].concat(question.queried);
      return answers;
    } else if(question.type == 'wh') {
      // 'wh' questions allow you to say any set of queried items,
      // or to say "nothing" when none of the querried items exist
      return replaceEmptyListWithStringNothing(
        map(
          function(v){return v.join('+');},
          powerset(question.queried)
        ));
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  },

  // R1 chooses among responses licensed by the question
  getLicensedResponsesR1: function(question) {
    return (question.type == 'wh' ?
            R1WHResponses : R1PolarResponses)
  },
  // semantic meaning function
  meaning: meaningFunction
};

// amended context with feature-based (additive) preferences
var pieCakeContextAdditivePreferences = extend(
  pieCakeContext,
  {
    name : "pieCake-prefs-additive",
    // feature-additive preferences: pie = 2, cake = 1, rasp = 6, lemon = 4;
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'raspPie'   ? 8/2 :
                                 a == 'raspCake'  ? 7/2 :
                                 a == 'lemonPie'  ? 6/2 :
                                 a == 'lemonCake' ? 5/2 :
                                 a == 'nothing'   ? 1/2 :
                                 console.error('unknown action')
                                ) : 0.0000001;
    }
  }
)

// amended context with feature-based (additive) preferences (reversed)
var pieCakeContextAdditivePreferencesReversed = extend(
  pieCakeContext,
  {
    name : "pieCake-prefs-additive-reversed",
    // feature-additive preferences: pie = 4, cake = 6, rasp = 1, lemon = 2;
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'raspPie'   ? 5/2 :
                                 a == 'raspCake'  ? 7/2 :
                                 a == 'lemonPie'  ? 6/2 :
                                 a == 'lemonCake' ? 8/2 :
                                 a == 'nothing'   ? 1/2 :
                                 console.error('unknown action')
                                ) : 0.0000001;
    }
  }
)

// amended context with topic preference (dough is irrelevant)
//   agent prefers raspberry over lemon and rather has nothing than lemon
var pieCakeContext_raspberry = extend(
  pieCakeContext,
  {
    name : "raspberry-pref",
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'raspPie'   ? 7/2 :
                                 a == 'raspCake'  ? 7/2 :
                                 a == 'lemonPie'  ? 1/2 :
                                 a == 'lemonCake' ? 1/2 :
                                 a == 'nothing'   ? 2/2 :
                                 console.error('unknown action')
                                ) : 0.0000001;
    }
  }
)
//   like the previous but reversed (lemon > nothing > raspberry)
var pieCakeContext_lemon = extend(
  pieCakeContext,
  {
    name : "lemon-pref",
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'raspPie'   ? 1/2 :
                                 a == 'raspCake'  ? 1/2 :
                                 a == 'lemonPie'  ? 7/2 :
                                 a == 'lemonCake' ? 7/2 :
                                 a == 'nothing'   ? 2/2 :
                                 console.error('unknown action')
                                ) : 0.0000001;
    }
  }
)


// amended context with unbiased questioner beliefs and no preferences over any baked good
var pieCakeContextUnbiasedNoPref = extend(
  pieCakeContext,
  {
    name : "pieCake-no-prefs",
    // respondent knows true answer
    R0PriorOverWorlds: Delta({v: 'lemonCake'}),
    // no preferences over baked goods
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? 1 : 0.0000001;
    }
  }
)

// amended context with biased questioner beliefs and no preferences over any baked good
var pieCakeContextBiasedNoPref = extend(
  pieCakeContextUnbiasedNoPref,
  {
    name : "pieCake-no-prefs-over-confident",
    // assume questioner is virtually certain that they have either raspberry pie
    // or lemon cake (but not both)
    questionerBeliefs: Categorical({
      vs: setsOfBakedGoods,
      ps: map(
        function (x) {
          return x == 'raspPie' ? 1000 : x == 'lemonCake' ? 1000 : 1
        },
        setsOfBakedGoods
      )
    })
  }
)

// amended context with biased, heavily pessimistic beliefs & no preferences
var pieCakeContextBiasedPessimist = extend(
  pieCakeContextUnbiasedNoPref,
  {
    name : "pieCake-no-prefs-pessimist",
    // questioner believes that the shop has likely no or very few items
    questionerBeliefs: Categorical({
      vs: setsOfBakedGoods,
      ps: map(
        function (x) {
          return (x == 'nothing' ? 10000 :
                  x.split('+').length == '1' ? 100 :
                  x.split('+').length == '2' ? 1 :
                  x.split('+').length == '3' ? 0.01 :
                  x.split('+').length == '4' ? 0.0001 :
                  0.000000001)
        },
        setsOfBakedGoods
      )
    })
  }
)

// --------------------------------------
// R1 prior beliefs over various contexts
// --------------------------------------

// R1 does not know the belief state of the questioner
var R1PriorContext_beliefsQ1 = {
  confident: pieCakeContextBiasedNoPref,
  unbiased:  pieCakeContextUnbiasedNoPref,
  pessimist: pieCakeContextBiasedPessimist,
  distribution: Categorical({vs: ["confident" , "unbiased",  "pessimist"]})
}

// R1 does not know the preferences of the questioner
var R1PriorContext_PreferenceQ1 = {
  raspCake:  pieCakeContextAdditivePreferences,
  PieLemon:  pieCakeContextAdditivePreferencesReversed,
  distribution: Categorical({vs: ["raspCake" , "PieLemon"]})
}

// R1 does not know the preferences of the questioner
var R1PriorContext_BinaryPrefs = {
  raspberry: pieCakeContext_raspberry,
  lemon    : pieCakeContext_lemon,
  distribution: Categorical({vs: ["raspberry" , "lemon"]})
}
